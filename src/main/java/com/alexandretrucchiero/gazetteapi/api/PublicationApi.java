/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.alexandretrucchiero.gazetteapi.api;


import com.alexandretrucchiero.gazetteapi.api.data.Publication;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Validated
public interface PublicationApi {

    /**
     * POST /api/publication/ : Crée une nouvelle publication
     *
     * @param publication (required)
     * @return Publication créée (status code 200)
     * or Payload d&#39;erreur (commun 4xx / 5xx) (status code 400)
     */
    @PostMapping(
            value = "/api/publication/",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    ResponseEntity<Publication> createPublication(@RequestBody Publication publication);


    /**
     * DELETE /api/publication/{id}/ : Supprime une publication
     *
     * @param id Identifiant de la publication (required)
     * @return Publication supprimée (status code 204)
     * or Payload d&#39;erreur (commun 4xx / 5xx) (status code 400)
     */
    @DeleteMapping(
            value = "/api/publication/{id}/",
            produces = {"application/json"}
    )
    ResponseEntity<Void> deletePublication(@PathVariable("id") String id);


    /**
     * GET /api/publication/ : Recherche des publications
     *
     * @param abonnement Sélectionne les publications qui correspondent aux abonnements de l&#39;utilisateur connecté (optional)
     * @param text       Champ de recherche \&quot;smart\&quot;. Prend des mots, séparés par +. Dans un mot, * correspond à un \&quot;wildcard\&quot;. Si le mot commence par &#39;#&#39;, il faut filtrer sur les tags. Si le mot ressemble à une date (2020, 10/2020, 07/10/2020 par example) et est préfixé / suffixé par &#39;:&#39;, il faut filtrer sur les dates de publications antérieures / postérieures. Si on a deux dates séparées par un \&quot;:\&quot; on filtre sur l&#39;intervalle. Sinon on cherche le mot dans le titre, la description, le statut et le créateur. La casse (majuscules / minuscules) et l&#39;accentuation ne sont pas pris en compte (\&quot;S\&quot; et \&quot;s\&quot;, \&quot;é\&quot; and \&quot;e\&quot; sont considérés comme similaires)  (optional)
     * @return Liste des abonnements qui vérifient les critères de recherche (status code 200)
     * or Payload d&#39;erreur (commun 4xx / 5xx) (status code 400)
     */
    @GetMapping(
            value = "/api/publication/",
            produces = {"application/json"}
    )
    ResponseEntity<List<Publication>> searchPublication(@RequestParam(value = "abonnement", required = false) Boolean abonnement, @RequestParam(value = "text", required = false) String text);

    /**
     * PUT /api/publication/{id}/ : Met à jour une publication
     *
     * @param id          Identifiant de la publication (required)
     * @param publication (required)
     * @return Publication mise à jour (status code 200)
     * or Payload d&#39;erreur (commun 4xx / 5xx) (status code 400)
     */
    @PutMapping(
            value = "/api/publication/{id}/",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    ResponseEntity<Publication> updatePublication(@PathVariable("id") String id, @RequestBody Publication publication);


    /**
     * PUT /api/publication/{id}/valider : Valide une publication
     * Suite à sa validation, la publication est publiée
     *
     * @param id Identifiant de la publication (required)
     * @return La publication a été validée (status code 204)
     * or Payload d&#39;erreur (commun 4xx / 5xx) (status code 400)
     */
    @PutMapping(
            value = "/api/publication/{id}/valider",
            produces = {"application/json"}
    )
    ResponseEntity<Void> validatePublication(@PathVariable("id") String id);

}
